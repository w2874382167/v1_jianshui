# Generated by Django 4.2 on 2024-07-29 01:35

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Avatars',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('url', models.FileField(upload_to='avatars/', verbose_name='用户头像地址')),
            ],
            options={
                'verbose_name_plural': '用户头像',
            },
        ),
        migrations.CreateModel(
            name='Cover',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('url', models.FileField(upload_to='article_img/', verbose_name='文章封面地址')),
            ],
            options={
                'verbose_name_plural': '文章封面',
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=16, verbose_name='标签名字')),
            ],
            options={
                'verbose_name_plural': '文章标签',
            },
        ),
        migrations.CreateModel(
            name='Articles',
            fields=[
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=32, null=True, verbose_name='标题')),
                ('abstract', models.CharField(blank=True, max_length=128, null=True, verbose_name='文章简介')),
                ('content', models.TextField(blank=True, null=True, verbose_name='文章内容')),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='文章发布日期')),
                ('change_date', models.DateTimeField(auto_now=True, null=True, verbose_name='文章修改日期')),
                ('status', models.IntegerField(choices=[(0, '未发布'), (1, '已发布')], verbose_name='文章保存状态')),
                ('recommend', models.BooleanField(default=True, verbose_name='是否上推荐')),
                ('look_count', models.IntegerField(default=0, verbose_name='文章阅读量')),
                ('comment_count', models.IntegerField(default=0, verbose_name='文章评论量')),
                ('digg_count', models.IntegerField(default=0, verbose_name='文章点赞量')),
                ('collects_count', models.IntegerField(default=0, verbose_name='文章收藏数')),
                ('category', models.IntegerField(blank=True, choices=[(1, '新闻速览'), (2, '游玩')], null=True, verbose_name='文章分类')),
                ('author', models.CharField(blank=True, max_length=16, null=True, verbose_name='作者')),
                ('source', models.CharField(blank=True, max_length=32, null=True, verbose_name='来源')),
                ('link', models.URLField(blank=True, null=True, verbose_name='文章链接')),
                ('word', models.IntegerField(default=0, verbose_name='文章字数')),
                ('cover', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.cover', verbose_name='文章封面')),
                ('tag', models.ManyToManyField(blank=True, to='app.tags', verbose_name='文章标签')),
            ],
            options={
                'verbose_name_plural': '文章',
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('nick_name', models.CharField(blank=True, max_length=16, null=True, verbose_name='昵称')),
                ('account_status', models.IntegerField(choices=[(0, '账号正常'), (1, '账号异常'), (2, '账号被封禁')], default=0, verbose_name='账号状态')),
                ('avatar_url', models.URLField(blank=True, help_text='可以是其他平台的头像', null=True, verbose_name='用户头像')),
                ('avatar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.avatars', verbose_name='用户头像')),
                ('collects', models.ManyToManyField(blank=True, to='app.articles', verbose_name='收藏的文章')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
